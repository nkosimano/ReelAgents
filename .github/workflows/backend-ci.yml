name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'aws/**'
      - 'api/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'aws/**'
      - 'api/**'

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.9'

jobs:
  test-lambda-functions:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov boto3 moto requests PyJWT cryptography
        if [ -f aws/requirements.txt ]; then pip install -r aws/requirements.txt; fi

    - name: Run Lambda function tests
      run: |
        cd tests/backend
        python -m pytest test_*.py -v --cov=../../aws/lambda --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/backend/coverage.xml
        flags: backend
        fail_ci_if_error: true

  test-api-functions:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov supabase stripe
        if [ -f api/requirements.txt ]; then pip install -r api/requirements.txt; fi

    - name: Run API function tests
      run: |
        cd tests/backend
        python -m pytest test_*_api.py -v --cov=../../api --cov-report=xml

  validate-sam-template:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup AWS SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Validate SAM template
      run: |
        cd aws/deployment
        sam validate --template template.yaml

    - name: Build SAM application
      run: |
        cd aws/deployment
        sam build --use-container

  deploy-aws-staging:
    runs-on: ubuntu-latest
    needs: [test-lambda-functions, validate-sam-template]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup AWS SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Deploy to staging
      run: |
        cd aws/deployment
        chmod +x deploy.sh
        ./deploy.sh staging
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL_STAGING }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY_STAGING }}

  deploy-aws-production:
    runs-on: ubuntu-latest
    needs: [test-lambda-functions, test-api-functions, validate-sam-template]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup AWS SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Deploy to production
      run: |
        cd aws/deployment
        chmod +x deploy.sh
        ./deploy.sh prod
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

    - name: Run post-deployment tests
      run: |
        # Run smoke tests against production API
        python -m pytest tests/backend/test_production_smoke.py -v
      env:
        AWS_REGION: ${{ env.AWS_REGION }}
        API_GATEWAY_URL: ${{ secrets.PRODUCTION_API_URL }}

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r aws/lambda/ api/ -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json